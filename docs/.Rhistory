df%>%group_by(Category,sum(App))
df%>%group_by(Category,count(App))
df%>%group_by(Category)
df%>%group_by(Category)%>%count(App)
df2<-df%>%group_by(Category)%>%count(App)
dim(df2)
names(df2)
View(df1)
View(df2)
ggplot(data=df,aes(y=df$Installs>100000,x=df$Genres))+geom_boxplot()
View(df2)
ls
ls
import library(ggplot2)
import library("ggplot2")
library("ggplot2")
data
ls
sview
View()
View(data)
library(rpart)
library(tidyverse)
model_random_forest<-  function(target_data,train_set,test_test)
{
}
getwd()
test_data<-read_csv("/Users/kuldeep/desktop/datasets_kaggle/Reression_model_houseprice/train.csv")
test_data<-read_csv("/Users/kuldeep/desktop/datasets_kaggle/Reression_model_houseprice/all/train.csv")
test_data<-read_csv("/Users/kuldeep/Desktop/datasets_kaggle/Reression_model_houseprice/all/train.csv")
test_data<-read_csv("/Users/kuldeep/Desktop/datasets_kaggle/Regression_model_houseprice/all/train.csv")
head(test_data)
names(test_data)
model<-rpart(SalePrice~*,test_data)
model<-rpart(SalePrice~.,test_data)
model.tables()
train_data<-read_csv("/Users/kuldeep/Desktop/datasets_kaggle/Regression_model_houseprice/all/train.csv")
head(train_data)
names(train_data)
model<-rpart(SalePrice~.,train_data)
pridi
test_data<-read_csv("/Users/kuldeep/Desktop/datasets_kaggle/Regression_model_houseprice/all/test.csv")
summary(model)
model
value<-predict(model,test_data)
value
library(ggplot2)
ggplot(value,aes(x=value))+geom_histogram()
ggplot(data=value,aes(x=value))+geom_histogram()
ggplot(data=as.data.frame(value),aes(x=value))+geom_histogram()
ggplot(data=as.data.frame(value),aes(x=value))+geom_histogram(binwidth = 10)
names
names(value)
names(test_data)
dim(validEnc())
dim(value)
dim(value)
value
length(value)
dim(test_data)
resultdf<-data.frame(Id=test_data$Id,SalePrice=)
View
View(value)
names(value)<-"SellPrice"
colnames(value)<"SellPrice"
View
View(value)
?colnames<-
?colnames
value<-data.frame(value)
resultdf<-data.frame(Id=test_data$Id,SalePrice=value$value)
View(resultdf)
write.csv(resultdf,"result.csv")
sample_df<-read.csv("/Users/kuldeep/Desktop/datasets_kaggle/Regression_model_houseprice/all/sample_submission.csv")
View
View(sample_df)
sample_df
value
value
resultdf
head(resultdf)
head(sample_df)
write.csv(resultdf,"result1.csv",row.names = FALSE)
summarise(model)
summary(model)
sale
model
glm.predict<-glm()
summary(train_data)
library(rmodel)
model_linear_regression<-glm(SalePrice~.,train_data)
model_linear_regression
df_all<-data.frame(Continent_Sale=c("Japan","North_America","Europe","Other"),Values=c(JP_tot,Na_tot,Eu_tot,Other_tot))
plot(cars)
install.packages("keras")
knitr::opts_chunk$set(echo = TRUE)
```
names(df)
knitr::opts_chunk$set(echo = TRUE)
```
htmltools::img(src = knitr::image_uri(file.path("/Users/kuldeep/Desktop/blue3.jpg")),
alt = 'logo',
style = 'position:absolute; top:0; right:0; padding:10px;')
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```{r results='hide',message=FALSE,echo=FALSE,warning=FALSE}
```{r results='hide',message=FALSE,echo=FALSE,warning=FALSE}
```{r results='hide',message=FALSE,echo=FALSE,warning=FALSE}
```{r results='hide',message=FALSE,echo=FALSE,warning=FALSE}
```{r results='hide',message=FALSE,echo=FALSE,warning=FALSE}
library(dplyr)
library(dplyr)
library(dplyr)
library(dplyr)
library(dplyr)
library(dplyr)
library(dplyr)
library(dplyr)
library(dplyr)
library(tidyverse)
hi
names(df)
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
htmltools::img(src = knitr::image_uri(file.path("/Users/kuldeep/Desktop/blue3.jpg")),
alt = 'logo',
style = 'position:absolute; top:0; right:0; padding:10px;')
htmltools::img(src = knitr::image_uri(file.path("/Users/kuldeep/Desktop/blue3.jpg")),
alt = 'logo',
style = 'position:absolute; top:0; right:0; padding:10px;')
```{r resuts='hide',message=FALSE,echo=FALSE,warning=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
```
htmltools::img(src = knitr::image_uri(file.path("/Users/kuldeep/Desktop/blue3.jpg")),
alt = 'logo',
style = 'position:absolute; top:0; right:0; padding:10px;')
library(dplyr)
library(tidyverse)
library(ggplot2)
setwd("/Users/kuldeep/Desktop/Deploy")
main_df<-read_csv("/Users/kuldeep/Downloads/vgsales.csv",na=c("Na","N/A","NA","na","  "))
df<-main_df
summary(df)
dim(df)
library(knitr)
library(kableExtra)
name<-names(df)
name<-as.data.frame(name)
colnames(name)<-"Atrributes"
name["meanings"]<-c("Rank of video game","Name of video game","Platform for which it is developed","Year of release","type of game","Publisher/Developing Company","North Amrica total Sales","Europe total Sales","Japan Sales","Sales in all other Countries","Global total Sales")
kable(name)%>%
kable_styling(bootstrap_options = c("striped", "hover","bordered", "condensed"),full_width = F)%>%column_spec(2,background ="#BSB8B6")
df<-as.data.frame(df)
for(i in 3:6)
{
df[,i]<-as.factor(df[,i])
}
summary(df)
mean(df[,"Global_Sales"]-(df[,c(-2)]+df[,c(-3)]+df[,c(-4)]+df[,c(-5)]))
mean(df[,"Global_Sales"]-(df[,-2])
mean(df[,"Global_Sales"]-(df[,-2]))
df[,"Global_Sales"]-(df[,-2])
df[,"Global_Sales"]
df[,-1]
names(df)
df[,length(names(df))]
mean(df[,length(names(df))]-(df[,length(names(df)-1)]+df[,length(names(df)-2)]+df[,length(names(df)-3)]+df[,length(names(df)-4)]))
mean(df[,length(names(df))]-(df[,as.double(length(names(df)-1))]+df[,as.double(length(names(df)-2))]+df[,as.double(length(names(df)-3))]+df[,as.double(length(names(df)-4))]))
mean(df[,length(names(df))]-(df[,as.double(length(names(df)-1))]+df[,as.double(length(names(df)-2))]+df[,as.double(length(names(df)-3))]+df[,as.double(length(names(df)-4))]))
mean(df[,length(names(df))]-(df[,as.double(length(names(df)-1))]+df[,as.double(length(names(df)-2))]+df[,as.double(length(names(df)-3))]+df[,as.double(length(names(df)-4))]))
mean(df[,length(names(df))]-(df[,length(names(df))-1]+df[,length(names(df))-2]+df[,length(names(df))-3]+df[,length(names(df))-4]))
ggplot(data = (df[,length(names(df))-1]+df[,length(names(df))-2]+df[,length(names(df))-3]+df[,length(names(df))-4]))+geom_bar()
tot_val<-as.data.frame(df[,length(names(df))-1]+df[,length(names(df))-2]+df[,length(names(df))-3]+df[,length(names(df))-4])
colnames(tot_val)<-"total_Sale"
ggplot(data = tot_val,aes(x=tot_val$total_Sale))+geom_histogram()
mean(df[,length(names(df))]-(df[,length(names(df))-1]+df[,length(names(df))-2]+df[,length(names(df))-3]+df[,length(names(df))-4]))+
tot_val<-cbind(tot_val,df[,length(names(df))])
mean(df[,length(names(df))]-(df[,length(names(df))-1]+df[,length(names(df))-2]+df[,length(names(df))-3]+df[,length(names(df))-4]))
tot_val<-cbind(tot_val,df[,length(names(df))])
names(tot_val)
ggplot(data = tot_val)+geom_freqpoly(mapping=aes(x=tot_val$total_Sale))+geom_freqpoly(mapping = aes(x=df[, length(names(df))]))
ggplot(data = tot_val)+geom_freqpoly(mapping=aes(x=tot_val$total_Sale),color="red",alpha=0.5)+geom_freqpoly(mapping = aes(x=df[, length(names(df))]),color="green")
ggplot(data = tot_val)+geom_freqpoly(mapping=aes(x=tot_val$total_Sale),color="red",alpha=1)+geom_freqpoly(mapping = aes(x=df[, length(names(df))]),color="green")
ggplot(data = tot_val)+geom_freqpoly(mapping=aes(x=tot_val$total_Sale),color="red",alpha=1)
ggplot(data = tot_val)+geom_freqpoly(mapping=aes(x=tot_val$total_Sale),color="red",alpha=1)++geom_freqpoly(mapping = aes(x=df[, length(names(df))]),color="green")
ggplot(data = tot_val)+geom_freqpoly(mapping=aes(x=tot_val$total_Sale),color="red",alpha=1)+geom_freqpoly(mapping = aes(x=df[, length(names(df))]),color="green")
ggplot(data = tot_val)+geom_freqpoly(mapping=aes(x=tot_val$total_Sale),color="red",alpha=0.5,stat_bin=10)+geom_freqpoly(mapping = aes(x=df[, length(names(df))]),color="green",stat_bin=10)
ggplot(data = tot_val)+geom_freqpoly(mapping=aes(x=tot_val$total_Sale),color="red",alpha=0.8,stat_bin=10)+geom_freqpoly(mapping = aes(x=df[, length(names(df))]),color="green")
df%>%group_by(name)%>%summarise(n()=count)
df%>%group_by(name)%>%summarise(count=n())
df%>%group_by(name)%>%summarise(count=n())
names(df)
df%>%group_by(Name)%>%summarise(count=n())%>%filter(count>0)
df%>%group_by(Name)%>%summarise(count=n())%>%filter(count>1)
ggplot(data = df,aes(x=df$Year,position="Fill",color=df$Genre))+geom_bar()+coord_flip()
ggplot(data = df,aes(x=df$Year,position="Fill",fill=df$Genre))+geom_bar()+coord_flip()
df%>%group_by(Name)%>%summarise(count=n())%>%filter(count>1)%>%order_by(count)
df%>%group_by(Name)%>%summarise(count=n())%>%filter(count>1)%>%order_by(count)
df%>%group_by(Name)%>%summarise(count=n())%>%filter(count>1)%>%order_by(desc())
df%>%group_by(Name)%>%summarise(count=n())%>%filter(count>1)%>%arrange(desc(count))
df%>%group_by(Name)%>%summarise(count=n())%>%filter(count>1)%>%arrange(desc(count))%>%first(10)
df%>%group_by(Name)%>%summarise(count=n())%>%filter(count>1)%>%arrange(desc(count))%>%
df%>%group_by(Name)%>%summarise(count=n())%>%filter(count>1)%>%arrange(desc(count))
names(df)
ggplot(data = df,aes(x=df$Genre,fill=df$Platform))+geom_bar()+coord_polar()
ggplot(data = df,aes(x=df$Genre,fill=df$Genre))+geom_bar()
ggplot(data = df,aes(x=reorder(Genre,Genre,FUN = median),fill=df$Genre))+geom_bar()+coord_flip()
ggplot(data = df,aes(x=reorder(Genre,Genre,FUN = median),fill=df$Genre))+geom_bar()+coord_flip()
ggplot(data = df,aes(x=Genre,fill=df$Genre))+geom_bar()+coord_flip()
ggplot(data = df,aes(x=reorder(Genre,FUN = median),fill=df$Genre))+geom_bar()+coord_flip()
ggplot(data = df,aes(x=reorder(Genre,Genre,FUN = median),fill=df$Genre))+geom_bar()+coord_flip()
ggplot(data = df,aes(x=reorder(Genre,count),fill=df$Genre))+geom_bar()+coord_flip()
ggplot(data = df,aes(x=reorder(Genre,Count),fill=df$Genre))+geom_bar()+coord_flip()
ggplot(data = df,aes(x=reorder(Genre,Count),y=Count,fill=df$Genre))+geom_bar()+coord_flip()
install.packages("forcats")
install.packages("forcats")
library(forcats)
ggplot(data = df,aes(x=fct_infreq(Genre),fill=df$Genre))+geom_bar()+coord_flip()
library(forcats)
ggplot(data = df,aes(x=fct_infreq(Genre),fill=df$Genre))+geom_bar()+coord_flip()
names(df)
shiny::runApp('Desktop/mydash/myDashboark')
?fix()
fix(Hitters)
fix(Hitters)
fix(Hitters)
names(Hitters)
library(ISLR)
library(ISLR)
install.packages("ISLR")
library(ISLR)
fix(Hitters)
names(Hitters)
library(ISLR)
ISLR::Hitters
library(ISLR)
head(ISLR::Hitters)
library(ISLR)
head(ISLR::Hitters)
sum(is.na(Hitters))
fix(Hitters)
sum(is.na(Hitters$Salary))
library(ISLR)
head(ISLR::Hitters)
sum(is.na(Hitters$Salary))
is.na(Hitters$Salary)
View(Hitters)
View(Hitters)
library(ISLR)
head(ISLR::Hitters)
is.na(Hitters$Salary)
is.na(ISLR::Hitters$Salary)
hit<-ISLR::Hitters
head(hit)
is.na(hit$Salary)
sum(is.na(hit$Salary)
sum(is.na(hit$Salary)
)
sum(is.na(hit$Salary))
hit<-na.omit(hit)
dim(hit)
# need leps library for for finding best subset selections
install.packages("leaps")
library(leaps)
regfit.full<-regsubsets(Salary~.,Hitters)
regfit.full<-regsubsets(Salary~.,hit)
summary(regfit.full)
plot(regfit.full)
# by default give upto 8 so exclusively tell
regfit.full<-regsubsets(Salary~.,hit,nvmax = 19)# nvmax give the max no of variable for which to cosider
reg_summary<-summary(regfit.full)
names(reg_summary)
reg_summary$rsq
plot(reg_summary$rss,xlab = "no of variable",ylab = "RSS",type="1")
# but at 2 major increase invthe model effeciency
par(mfrow=c(2,2))
plot(reg_summary$rss,xlab = "no of variable",ylab = "RSS",type="1")
# but at 2 major increase invthe model effeciency
par(mfrow=c(2,2))
plot(reg_summary$rss,xlab = "no of variable",ylab = "RSS",type="1")
plot(reg_summary$adjr2,xlab = "no of variable",ylab="Adjs rsq",type="1")
plot(reg_summary$rss,xlab = "no of variable",ylab = "RSS",type="1")
plot(reg_summary$adjr2,xlab = "no of variable",ylab="Adjs rsq",type="1")
# but at 2 major increase invthe model effeciency
par(mfrow=c(2,2))
plot(reg_summary$rss,xlab = "no of variable",ylab = "RSS",type="1")
plot(reg_summary$adjr2,xlab = "no of variable",ylab="Adjs rsq",type="1")
plot(reg_summary$rss,xlab = "no of variable",ylab = "RSS",type="1")
plot(reg_summary$adjr2,xlab = "no of variable",ylab="Adjs rsq",type="1")
# but at 2 major increase invthe model effeciency
par(mfrow=c(2,2))
plot(reg_summary$rss,xlab = "no of variable",ylab = "RSS",type="1")
# but at 2 major increase invthe model effeciency
par(mfrow=c(2,2))
plot(reg_summary$rss,xlab = "no of variable",ylab = "RSS",type="1")
plot(reg_summary$adjr2,xlab = "no of variable",ylab="Adjs rsq",type="1")
library(ggplot2)
# but at 2 major increase invthe model effeciency
par(mfrow=c(2,2))
plot(reg_summary$rss,xlab = "no of variable",ylab = "RSS",type="1")
plot(reg_summary$adjr2,xlab = "no of variable",ylab="Adjs rsq",type="1")
plot(reg_summary$rss,xlab = "no of variable",ylab = "RSS",type="1")
plot(reg_summary$adjr2,xlab = "no of variable",ylab="Adjs rsq",type="1")
# but at 2 major increase invthe model effeciency
par(mfrow=c(2,2))
plot(reg_summary$rss,xlab = "no of variable",ylab = "RSS",type="1")
plot(reg_summary$adjr2,xlab = "no of variable",ylab="Adjs rsq",type="1")
plot(reg_summary$rss,xlab = "no of variable",ylab = "RSS")
plot(reg_summary$adjr2,xlab = "no of variable",ylab="Adjs rsq")
plot(reg_summary$rss,xlab = "no of variable",ylab = "RSS")
plot(reg_summary$adjr2,xlab = "no of variable",ylab="Adjs rsq")
which.max(reg_summary$adjr2)
which.max(reg_summary$adjr2)
library(ggplot2)
which.max(reg_summary$adjr2)
points(11,reg_summary$adjr2[11],col="red,pch-20")
points(11,reg_summary$adjr2[11],col="red",pch="20")
plot(reg_summary$rss,xlab = "no of variable",ylab = "RSS")
which.max(reg_summary$adjr2)
points(11,reg_summary$adjr2[11],col="red",pch="20")
points(11,reg_summary$adjr2[11],col="red",pch="20")
# but at 2 major increase invthe model effeciency
par(mfrow=c(2,2))
plot(reg_summary$rss,xlab = "no of variable",ylab = "RSS")
plot(reg_summary$adjr2,xlab = "no of variable",ylab="Adjs rsq")
library(ggplot2)
which.max(reg_summary$adjr2)
points(11,reg_summary$adjr2[11],col="red",pch="20")
# but at 2 major increase invthe model effeciency
par(mfrow=c(2,2))
plot(reg_summary$rss,xlab = "no of variable",ylab = "RSS")
plot(reg_summary$adjr2,xlab = "no of variable",ylab="Adjs rsq")
library(ggplot2)
which.max(reg_summary$adjr2)
points(11,reg_summary$adjr2[11],col="red",pch="20")
# regsubsets also have a built in plot function
plot(regfit.full,scale = "r2")
# regsubsets also have a built in plot function
plot(regfit.full,scale = "r2")
plot(regfit.full,scale = "Cp")
plot(regfit.full,scale = "Bic")
plot(regfit.full,scale = "Bic")
plot(regfit.full,scale = "Bic")
plot(regfit.full,scale = "bic")
# at the end use coef function to  get the regressed coefficents of the data
# forward and backword selections same function as abv
regfit.fwd<-regsubsets(Salary~.,data=Hitters,nvmax = 19,method = "forward")
summary(regfit.fwd)
# at the end use coef function to  get the regressed coefficents of the data
# forward and backword selections same function as abv
regfit.fwd<-regsubsets(Salary~.,data=Hitters,nvmax = 19,method = "forward")
# at the end use coef function to  get the regressed coefficents of the data
# forward and backword selections same function as abv
regfit.fwd<-regsubsets(Salary~.,data=hit,nvmax = 19,method = "forward")
summary(regfit.fwd)
regfit.bkwd<-regsubsets(Salary~.,data=hit,nvmax = 19,method = "backward")
summary(regfit.bkwd)
coef(regfi)
coef(regfit.bkwd,7)
coef(regfit.fwd,7)
coef(regfit.bkwd,7)
plot(regfit.full,scale = "r2")
plot(regfit.full,scale = "adjr2")
plot(regfit.full,scale = "bic")
coef(regfit.full,7)
set.seed(1)
train<-sample(c(TRUE,FALSE),nrow(hit),replace = TRUE)
test<-(!train)
set.seed(1)
train<-sample(c(TRUE,FALSE),nrow(hit),replace = TRUE)
test<-(!train)
regfit.best<-regsubsets(Salary~.,data=hit[train,],nvmax = 19)
val.errors=rep(NA,19)
gffggu
vujay
hgftyfyf
set.seed(1)
train<-sample(c(TRUE,FALSE),nrow(hit),replace = TRUE)
test<-(!train)
test.mat<-model.matrix(Salary~.,data=hit[test,])
regfit.best<-regsubsets(Salary~.,data=hit[train,],nvmax = 19)
val.errors=rep(NA,19)
val.errors[i]<-mean((hit$Salary[test]-pred)^2)
for(i in 1:19)
{
coefi<-coef(regfit.best,id=i)
pred<-test.mat[,names(coefi)]%*%coefi
val.errors[i]<-mean((hit$Salary[test]-pred)^2)
}
val.errors
val.errors# these are the validation set errors
which.min(val.errors)
# so 10 is the one which has the least
coef(regfit.best,10)
globalenv()
globalenv()
predict.regsubsets=function(object,newdata,id,...)
{
form=as.formula(object$call[[2]])
mat=model.matrix(form,newdata)
coefi=coef(object,id=id)
xvars<-names(coefi)
mat[,xvars]%*%coefi
}
# so 10 is the one which has the least
coef(regfit.best,10)# so these are the coefficeint and these are
pwd()
pwd()
getwd
getwd()
setwd("/Users/kuldeep/Documents/GitHub/")
setwd("/Users/kuldeep/Documents/GitHub/render_medium")
#
# This is the user-interface definition of a Shiny web application. You can
# run the application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
getwd()
#
# This is the user-interface definition of a Shiny web application. You can
# run the application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
getwd()
#
# This is the user-interface definition of a Shiny web application. You can
# run the application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
setwd("/Users/kuldeep/Documents/GitHub/render_medium/docs")
shiny::runApp('Pordge')
runApp('Pordge')
